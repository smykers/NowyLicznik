{"version":3,"sources":["ButtonsPanel.js","Step.js","Counter.js","App.js","serviceWorker.js","index.js"],"names":["ButtonsPanel","resetOrReinitCounter","reset","_this","props","resetCounterValue","_this2","this","react_default","a","createElement","className","onClick","changeCounterValue","newStep","Component","Step","stepUpdate","stepChange","_inputStep","value","initStepValue","type","ref","data","onChange","Counter","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","changeValue","step","parseInt","state","stepValue","setState","prevState","counterValue","resetCounter","initValue","isNaN","src_ButtonsPanel_0","src_Step_0","App","src_Counter_0","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"oTAoBeA,gOAdXC,qBAAuB,SAACC,GACtBC,EAAKC,MAAMC,kBAAkBH,4EAIxB,IAAAI,EAAAC,KACP,OAAQC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,gBACXH,EAAAC,EAAAC,cAAA,UAAQE,QAASL,KAAKH,MAAMS,oBAA5B,OAAqDN,KAAKH,MAAMU,SAChEN,EAAAC,EAAAC,cAAA,UAAQE,QAAS,kBAAMN,EAAKL,sBAAqB,KAAjD,SACAO,EAAAC,EAAAC,cAAA,UAAQE,QAAS,kBAAMN,EAAKL,sBAAqB,KAAjD,kBAXWc,cCkBZC,oNAfXC,WAAa,WACTd,EAAKC,MAAMc,WAAWf,EAAKgB,WAAWC,gFAInC,IAAAd,EAAAC,KACP,OAAQC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QACXH,EAAAC,EAAAC,cAAA,sBAGAF,EAAAC,EAAAC,cAAA,SAAOU,MAAOb,KAAKH,MAAMiB,cAAeC,KAAK,SAASC,IAAK,SAACC,GAAD,OAAWlB,EAAKa,WAAaK,GAAOC,SAAUlB,KAAKU,qBAZ3GF,cCmEJW,cAjEX,SAAAA,EAAYtB,GAAM,IAAAD,EAAAwB,OAAAC,EAAA,EAAAD,CAAApB,KAAAmB,IACdvB,EAAAwB,OAAAE,EAAA,EAAAF,CAAApB,KAAAoB,OAAAG,EAAA,EAAAH,CAAAD,GAAAK,KAAAxB,KAAMH,KAYV4B,YAAc,WAEV,IAAIC,EAAOC,SAAS/B,EAAKgC,MAAMC,WAE/BjC,EAAKkC,SAAU,SAACC,GACZ,MAAO,CACHC,aAAeD,EAAUC,aAAeN,MAnBlC9B,EA0BlBqC,aAAe,SAACA,GACZ,IAAIC,EAAU,EAETD,GACIE,MAAMvC,EAAKC,MAAMqC,aAClBA,EAAYP,SAAS/B,EAAKC,MAAMqC,YAGxCtC,EAAKkC,SAAS,CACVE,aAAcE,KAnCJtC,EAwClBiC,UAAY,SAACH,GACNA,EAAO,GACN9B,EAAKkC,SAAS,CACVD,UAAWH,KAxCnB,IAAIQ,EAAU,EAHA,OAITC,MAAMvC,EAAKC,MAAMqC,aAClBA,EAAYP,SAAS/B,EAAKC,MAAMqC,YAEpCtC,EAAKgC,MAAQ,CACTI,aAAcE,EACdL,UAAW,GATDjC,wEAoDlB,OAAQK,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WACXH,EAAAC,EAAAC,cAAA,yBAEQF,EAAAC,EAAAC,cAAA,QAAMC,UAAU,SACXJ,KAAK4B,MAAMI,eAGxB/B,EAAAC,EAAAC,cAACiC,EAAD,CAAc9B,mBAAoBN,KAAKyB,YAAa3B,kBAAqBE,KAAKiC,aAAc1B,QAAWP,KAAK4B,MAAMC,YAClH5B,EAAAC,EAAAC,cAACkC,EAAD,CAAMvB,cAAiBd,KAAK4B,MAAMC,UAAWlB,WAAcX,KAAK6B,oBA9D1DrB,aCYP8B,mLAXX,OACErC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,UAAQC,UAAU,cAAlB,kCAGAH,EAAAC,EAAAC,cAACoC,EAAD,CAASL,UAAU,gBAPT1B,aCQEgC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO7C,EAAAC,EAAAC,cAAC4C,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.1c25154d.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport \"./ButtonsPanel.css\";\r\n\r\n\r\nclass ButtonsPanel extends Component {\r\n\r\n    resetOrReinitCounter = (reset) => {\r\n      this.props.resetCounterValue(reset);\r\n    }\r\n\r\n\r\n  render() {\r\n    return (<div className=\"ButtonsPanel\">\r\n                <button onClick={this.props.changeCounterValue}>Add {this.props.newStep}</button> \r\n                <button onClick={() => this.resetOrReinitCounter(false)}>Reset</button> \r\n                <button onClick={() => this.resetOrReinitCounter(true)}>ReInit</button>      \r\n            </div>);\r\n  }\r\n}\r\n\r\nexport default ButtonsPanel;","import React, { Component } from 'react';\r\nimport \"./Step.css\"\r\n\r\n\r\n\r\nclass Step extends Component {\r\n\r\n    stepUpdate = () => {\r\n        this.props.stepChange(this._inputStep.value);\r\n    }\r\n\r\n\r\n  render() {\r\n    return (<div className=\"Step\">\r\n                <label>\r\n                    Krok:\r\n                </label>\r\n                <input value={this.props.initStepValue} type=\"number\" ref={(data) => (this._inputStep = data)} onChange={this.stepUpdate} />    \r\n            </div>);\r\n  }\r\n}\r\n\r\nexport default Step;","import React, { Component } from 'react';\r\nimport \"./Counter.css\";\r\nimport ButtonsPanel from \"./ButtonsPanel.js\";\r\nimport Step from \"./Step.js\";\r\n\r\nclass Counter extends Component {\r\n\r\n    constructor(props){\r\n        super(props);\r\n\r\n        let initValue=0;\r\n        if( !isNaN(this.props.initValue)){\r\n            initValue = parseInt(this.props.initValue);\r\n        }\r\n        this.state = {\r\n            counterValue: initValue,\r\n            stepValue: 5,\r\n        }\r\n    }\r\n\r\n    changeValue = () => {\r\n        \r\n        let step = parseInt(this.state.stepValue);\r\n\r\n        this.setState( (prevState) => {\r\n            return({\r\n                counterValue : prevState.counterValue + step,\r\n            })\r\n        });\r\n\r\n      \r\n    }\r\n\r\n    resetCounter = (resetCounter) => {\r\n        let initValue=0;\r\n\r\n        if(! resetCounter){\r\n            if(! isNaN(this.props.initValue)){\r\n                initValue = parseInt(this.props.initValue);\r\n            }\r\n        }\r\n        this.setState({\r\n            counterValue: initValue,\r\n        });\r\n\r\n    }\r\n\r\n    stepValue = (step) => {\r\n        if(step > 0){\r\n            this.setState({\r\n                stepValue: step,\r\n            });\r\n        }\r\n        \r\n    }\r\n\r\n\r\n\r\n  render() {\r\n    return (<div className=\"Counter\">\r\n                <header>\r\n                    Licznik:\r\n                        <span className='value'>\r\n                            {this.state.counterValue}\r\n                        </span>\r\n                </header>  \r\n                <ButtonsPanel changeCounterValue={this.changeValue} resetCounterValue = {this.resetCounter} newStep = {this.state.stepValue}/>\r\n                <Step initStepValue = {this.state.stepValue} stepChange = {this.stepValue}/>        \r\n            </div>);\r\n  }\r\n}\r\n\r\nexport default Counter;","import React, { Component } from 'react';\nimport './App.css';\nimport Counter from \"./Counter.js\";\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          1-licznik-z-ustawianym-krokiem\n        </header>\n        <Counter initValue=\"108\"/>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}